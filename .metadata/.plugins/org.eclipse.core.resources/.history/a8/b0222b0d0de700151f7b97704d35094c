
#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "inc/hw_ints.h"
#include "driverlib/debug.h"
#include "driverlib/gpio.h"
#include "driverlib/interrupt.h"
#include "driverlib/pin_map.h"
#include "driverlib/rom.h"
#include "driverlib/rom_map.h"
#include "driverlib/sysctl.h"
#include "driverlib/uart.h"
#include "utils/uartstdio.h"
#include "sensorlib/hw_sht21.h"
#include "sensorlib/hw_tmp006.h"
#include "sensorlib/i2cm_drv.h"
#include "sensorlib/sht21.h"
#include "sensorlib/tmp006.h"
#include "drivers/pinout.h"
#include "drivers/buttons.h"


//*****************************************************************************
//
// Global instance structure for the I2C master driver.
//
//*****************************************************************************
extern tI2CMInstance g_sI2CInst;

//*****************************************************************************
//
// Define TMP006 I2C Address.
//
//*****************************************************************************
#define TMP006_I2C_ADDRESS      0x41

//*****************************************************************************
//
// Global instance structure for the TMP006 sensor driver.
//
//*****************************************************************************
tTMP006 g_sTMP006Inst;

//*****************************************************************************
//
// Global instance structure for the TMP006 sensor data to be published.
//
//*****************************************************************************
sTMP006Data_t g_sTMP006Data;


//*****************************************************************************
//
// Global new error flag to store the error condition if encountered.
//
//*****************************************************************************
volatile uint_fast8_t g_vui8TMP006I2CErrorStatus;



//*****************************************************************************
//
// TMP006 Sensor callback function.  Called at the end of TMP006 sensor driver
// transactions. This is called from I2C interrupt context. Therefore, we just
// set a flag and let main do the bulk of the computations and display. We
// also give back the I2C Semaphore so that other may use the I2C driver.
//
//*****************************************************************************
void
TMP006AppCallback(void *pvCallbackData, uint_fast8_t ui8Status)
{

}

//*****************************************************************************
//
// TMP006 Application error handler.
//
//*****************************************************************************
void
TMP006AppErrorHandler(char *pcFilename, uint_fast32_t ui32Line)
{

}


//*****************************************************************************
//
// Called by the NVIC as a result of GPIO port H interrupt event. For this
// application GPIO port H pin 2 is the interrupt line for the TMP006
//
// To use the sensor hub on BoosterPack 2 modify this function to accept and
// handle interrupts on GPIO Port P pin 5.  Also move the reference to this
// function in the startup file to GPIO Port P Int handler position in the
// vector table.
//
//*****************************************************************************
void
IntHandlerGPIOPortH(void)
{

}

//*****************************************************************************
//
// This task reads the TMP006 and places that data into a shared structure.
//
//*****************************************************************************
static void
TMP006Task(void *pvParameters)
{

}

//*****************************************************************************
//
// Initializes the TMP006 task.
//
//*****************************************************************************
uint32_t
TMP006TaskInit(void)
{

}
